/**
 * Silva.hpp
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
 * Made by: Mattis DALLEAU
 */

#pragma once

#include <any>
#include <vector>
#include <typeinfo>
#include <optional>
#include <typeindex>
#include <unordered_map>
#include <unordered_set>
#include <cstddef>
#include <functional>
#include <ostream>
#include <string>
#include <exception>

#include "sparse_array"

// Enable debug mode by default so that the user can see the error messages
#ifndef HL_SILVA_DEBUG
    #define HL_SILVA_DEBUG 1
#endif

namespace hl
{
namespace silva
{
    class Error : public std::exception
    {
    private:
        const std::string _msg;

    public:
        Error(const std::string &msg) : _msg(msg) {}
        const char *what() const noexcept override { return _msg.c_str(); }
    };

    /**
     * @brief entity class
     */
    class Entity
    {
    public:
        using Id = std::size_t;

    private:
        Id id;

    public:
        /**
         * @brief Construct a new Entity object
         * @param  id: The id of the entity
         * @retval None
         */
        explicit Entity(Id id) : id(id) {}

        /**
         * @brief Destroy the Entity object
         */
        ~Entity() = default;

        /**
         * @brief Get the Id of the entity
         * @retval The id of the entity
         */
        inline operator Id() const
        {
            return id;
        }

        /**
         * @brief Get the Id of the entity
         * @retval The id of the entity
         */
        inline Id get_id() const { return id; }

        /**
         * @brief To string method
         */
        inline std::string to_string() const
        {
            return "hl::silva::Entity(" + std::to_string(id) + ")";
        }

        /**
         * @brief Print the entity
         */
        inline friend std::ostream &operator<<(std::ostream &os, Entity const &e)
        {
            return os << e.to_string();
        }
    };

    /**
     * @brief  Template Component class zipper (forward declaration)
     * @tparam Components: The components
     */
    template <class... Components>
    class Zipper;

    /**
     * @brief  Template Component class (forward declaration)
     * @tparam Components: The components
     */
    template <class... Components>
    using View = Zipper<Components...>;

    /**
     * @brief Registry class
     */
    class Registry
    {
    public:
        using anonymous_t = std::any;

        using dead_entities_t = std::unordered_set<Entity::Id>;

        using component_index_t = std::size_t;
        using component_registry_t = std::unordered_map<std::type_index, component_index_t>;
        template <typename Component>
        using component_sparse_array_t = hl::silva::sparse_array<Component>;
        using components_dynamic_array_t = std::vector<anonymous_t>;
        using component_removal_system_t = std::function<void(Entity const &)>;
        using component_removal_system_dynamic_array_t = std::vector<component_removal_system_t>;

        using system_t = std::function<void(Registry &)>;
        using system_dynamic_array_t = std::vector<system_t>;

    private:
        /**
         * @brief  Return casted component array
         * @tparam Component: The component type
         * @retval Casted component array
         */
        template <class Component>
        inline component_sparse_array_t<Component> &_component_cast(anonymous_t &anon)
        {
            return std::any_cast<component_sparse_array_t<Component> &>(anon);
        }

        /**
         * @brief  Return the index of the component
         * @tparam Component: The component type
         * @retval The index of the component
         */
        template <class Component>
        inline component_index_t _type_index() const
        {
#ifdef HL_SILVA_DEBUG
            auto it = _components_types_index.find(std::type_index(typeid(Component)));
            if (it == _components_types_index.end())
                throw Error("Component " + std::string(typeid(Component).name()) + " is not registered");
            return it->second;
#else
            return _components_types_index.at(std::type_index(typeid(Component)));
#endif
        }

    public:
        /**
         * @brief  Register one or more components
         * @tparam Component: The component type
         * @tparam ...OtherComponents: The other components
         */
        template <class ...Components>
        inline void register_components()
        {
            ((
                _components_types_index[std::type_index(typeid(Components))] = _last_component_index++,
                _components.push_back(component_sparse_array_t<Components>()),
                _remove_system_methods.push_back([this](const Entity &e) { this->remove<Components>(e); })
            ), ...);
        }

        /**
         * @brief  Get the component array of the template type
         * @tparam Component: The component type
         * @retval component_sparse_array_t<Component>&: The component array
         */
        template <class Component>
        inline component_sparse_array_t<Component> &get_components()
        {
            return _component_cast<Component>(_components[_type_index<Component>()]);
        }

        /**
         * @brief  Get the component array of the template type (const)
         * @tparam Component: The component type
         * @retval component_sparse_array_t<Component>&: The component array
         */
        template <class Component>
        inline component_sparse_array_t<Component> const &get_components() const
        {
            return _component_cast<Component>(_components[_type_index<Component>()]);
        }

        /**
         * @brief  Create a new entity
         * @retval New entity
         */
        Entity spawn_entity()
        {
            if (_killed_entities.empty())
                return Entity(_entities_count++);
            const Entity::Id random_id = *_killed_entities.begin();
            _killed_entities.erase(random_id);
            return Entity(random_id);
        }

        /**
         * @brief  Destroy an entity (The entity will actually be destroyed at the next call of the update method)
         * @param  entity: The entity to destroy
         */
        void kill_entity(Entity const &e)
        {
            _to_kill_entities.insert(e.get_id());
        }

        /**
         * @brief  Add a component to an entity and set the last entity id to the given entity
         * @param  &to: The entity to add the component
         * @param  &&c: The component to add
         * @retval A reference to the Registry
         */
        template <typename Component>
        Registry &insert(Entity const &to, Component &&c)
        {
            _last_entity_id = to.get_id();
            return insert_r(std::move(c));
        }

        /**
         * @brief  Add a component to an entity using the last entity id
         * @param  &&c: The component to add
         * @retval A reference to the Registry
         */
        template <typename Component>
        Registry &insert_r(Component &&c)
        {
            get_components<Component>().insert(_last_entity_id, std::move(c));
            return *this;
        }

        /**
         * @brief  Emplace a component to an entity and set the last entity id to the given entity
         * @param  &from: The entity to remove the component
         * @param  &&p: The parameters to construct the component
         * @tparam Component: The type of the component
         * @tparam ...Params: The types of the parameters
         * @retval Reference of the class Registry
         */
        template <typename Component, typename... Params>
        Registry &emplace(Entity const &to, Params &&...p)
        {
            _last_entity_id = to.get_id();
            return emplace_r<Component, Params...>(std::forward<Params>(p)...);
        }

        /**
         * @brief  Emplace a component to an entity using the last entity id
         * @param  &&...p: The parameters to construct the component
         * @tparam Component: The type of the component
         * @tparam ...Params: The types of the parameters
         * @retval Reference of the class Registry
         */
        template <typename Component, typename... Params>
        Registry &emplace_r(Params &&...p)
        {
            Component c = {std::forward<Params>(p)...};
            get_components<Component>().insert(_last_entity_id, std::move(c));
            return *this;
        }

        /**
         * @brief  Removes a component from an entity
         * @param  &from: The entity to remove the component
         * @tparam Component: The type of the component
         */
        template <typename Component>
        void remove(Entity const &from)
        {
            get_components<Component>().erase(from.get_id());
        }

        /**
         * @brief  Add a system to the Registry
         * @param  sys: The system to add
         */
        void add_system(const system_t &sys)
        {
            _systems.push_back(sys);
        }

        /**
         * @brief  Add a system to the Registry (rvalue ref version)
         * @param  sys: The system to add
         */
        void add_system(system_t &&sys)
        {
            _systems.push_back(sys);
        }

        // TODO: Implement remove_system
        template<typename ...Params>
        void remove_system(Params... params)
        {
            throw Error("System remove is not implemented yet");
        }

        /**
         * @brief  Update all the systems and the components of the Registry
         *         Kills the entities that were marked as "should be killed" last update
         *         before updating again
         */
        void update()
        {
            if (_to_kill_entities.empty() == false)
            {
                for (const auto &e : _to_kill_entities)
                {
                    for (const auto &f : _remove_system_methods)
                        f(Entity(e));
                    _killed_entities.insert(e);
                }
                _to_kill_entities.clear();
            }
            for (const system_t &system : _systems)
            {
                system(*this);
            }
        }

        /**
         * @brief  Return the number of entities (const)
         * @retval Number of entities
         */
        Entity::Id entities_count() const
        {
            return _entities_count - (_killed_entities.size() + _to_kill_entities.size());
        }
        
        /**
         * @brief Get the component of an entity
         * @param e: The entity
         * @tparam Component: The component
         * @retval Component&
         */
        template<typename Component>
        Component &get(Entity const &e)
        {
#if HL_SILVA_DEBUG
            auto& ref = get_components<Component>()[e.get_id()];
            if (ref.has_value() == false)
                throw Error("Entity " + std::to_string(e.get_id()) + " does not have the component " + std::string(typeid(Component).name()));
            return ref.value();
#else
            return get_components<Component>()[e.get_id()].value();
#endif
        }

        /**
         * @brief  Makes a class that can be used to iterate on all the specified components
         *         The class is considered invalid if one of the components is removed after the creation
         * @retval zipper<Components...>: The iterator of the components
         */
        template <typename... Components>
        Zipper<Components...> zip() { return Zipper<Components...>(*this); }

        /**
         * @brief Alias for the zip method because people are used to the view method
         */
        template <typename... Components>
        View<Components...> view() { return Zipper<Components...>(*this); }

        /**
         * @brief  Print the registry info
         */
        inline friend std::ostream &operator<<(std::ostream &os, hl::silva::Registry const &r)
        {
            os << "hl::silva::Registry(" << r.entities_count() << " entities)";
            return os;
        }

    private:
        component_index_t _last_component_index = 0;
        component_registry_t _components_types_index;
        components_dynamic_array_t _components;
        component_removal_system_dynamic_array_t _remove_system_methods;

        Entity::Id _entities_count = 0;
        dead_entities_t _to_kill_entities;
        dead_entities_t _killed_entities;
        Entity::Id _last_entity_id = -1;

        system_dynamic_array_t _systems;
    };

    /**
     * @brief Template Component class zipper
     */
    template <class... Containers>
    class Zipper
    {
    public:
        using value_type_t = std::tuple<sparse_array<Containers> &...>;
        using iterator_result_t = std::tuple<Entity, Containers &...>;

        /**
         * @brief Iterator class of the zipper
         */
        class iterator 
        {
        public:
            /**
             * @brief  Returns the current value of the iterator
             * @retval iterator_result: The current value of the iterator
             */
            iterator_result_t operator*()
            {
                // TODO: Should we check for validity? (i.e. already reached end)
                return iterator_result_t(
                    Entity(_idx),
                    std::get<sparse_array<Containers> &>(_current)[_idx].value()...);
            }

            /**
             * @brief Returns the current value of the iterator (const)
             * @retval iterator_result: The current value of the iterator
             */
            const iterator_result_t operator*() const
            {
                return iterator_result(
                    _idx,
                    std::get<sparse_array<Containers> &>(_current)[_idx].value()...);
            }

            /**
             * @brief  Increment the iterator
             * @retval Reference of the iterator
             */
            iterator &operator++()
            {
                incr_all();
                return *this;
            }

            /**
             * @brief  Increment the iterator (non const)
             * @retval Reference of the iterator
             */
            const iterator &operator++() const
            {
                incr_all();
                return *this;
            }

            /**
             * @brief  Return true if the two iterators are equal
             * @param  &lhs: The first iterator
             * @param  &rhs: The second iterator
             * @retval True if the two iterators are equal
             */
            friend bool operator==(iterator const &lhs,
                                   iterator const &rhs)
            {
                return lhs._idx == rhs._idx;
            }

            /**
             * @brief  Return true if the two iterators are different
             * @param  &lhs: The first iterator
             * @param  &rhs: The second iterator
             * @retval True if the two iterators are different
             */
            friend bool operator!=(iterator const &lhs,
                                   iterator const &rhs)
            {
                return !(lhs == rhs);
            }

            /**
             * @brief  Construct a new zipper iterator object
             * @param  &vref: The reference of the zipper
             * @param  index: The index of the iterator
             * @param  end: The end of the iterator (number of entities should be specified)
             */
            iterator(Zipper::value_type_t &vref,
                            std::size_t index,
                            std::size_t end)
                : _current(vref), _idx(index), _end(end)
            {
                if (!all_set() && index != end)
                {
                    incr_all();
                }
            }

            /**
             * @brief Return the index of the iterator (i.e. the entity id)
             */
            std::size_t index() const { return _idx; }

        private:
            /**
             * @brief  Increment the iterator
             */
            void incr_all() const
            {
                for (++_idx; !all_set() && _idx != _end; ++_idx);
            }

            /**
             * @brief  Check if all the containers are set at the current index
             * @retval True if all the containers are set at the current index
             */
            inline bool all_set() const
            {
                return (std::get<sparse_array<Containers> &>(_current).non_null(_idx) && ...);
            }

        private:
            Zipper::value_type_t &_current;
            mutable std::size_t _idx;
            const std::size_t _end;
        };

        /**
         * @brief  Construct a new zipper object
         * @param  &r: The registry to use
         */
        Zipper(Registry &r)
            : _values(r.get_components<Containers>()...), _end(_values, r.entities_count(), r.entities_count()), _begin(_values, 0, r.entities_count())
        {
        }

        /**
         * @brief  Return the begin iterator
         * @retval Begin iterator
         */
        iterator begin() { return _begin; }

        /**
         * @brief  Return the begin iterator (const)
         * @retval Begin iterator
         */
        const iterator begin() const { return _begin; }

        /**
         * @brief  Return the end iterator
         * @retval End iterator
         */
        iterator end() { return _end; }

        /**
         * @brief  Return the end iterator (const)
         * @retval End iterator
         */
        const iterator end() const { return _end; }

        using each_t = std::function<void(Containers &...)>;
        using each2_t = std::function<void(Entity, Containers &...)>;

        /**
         * @brief Apply a function to all the entities that the zipper::iterator considers valid
         *        Use each2 to also get the Entity object passed to the function
         * @param f: The function to apply
         * @retval Reference of the zipper
         */
        Zipper &each(each_t f)
        {
            for (auto it : *this)
            {
                f(std::get<Containers &>(it)...);
            }
            return *this;
        }

        /**
         * @brief Apply a function to all the entities that the zipper::iterator considers valid
         *        Use each to not pass the Entity object to the function
         * @param f: The function to apply
         * @retval Reference of the zipper
         */
        Zipper &each2(each2_t f)
        {
            for (auto it : *this)
            {
                f(std::get<Entity>(it), std::get<Containers &>(it)...);
            }
            return *this;
        }

        /**
         * @brief  Print the zipper info
         * @param &os: The output stream
         * @param &z: The zipper
         */
        inline friend std::ostream &operator<<(std::ostream &os, hl::silva::Zipper<Containers...> const &z)
        {
            os << "hl::silva::Zipper<";
            return ((os << typeid(Containers).name() << ", "), ...) << ">";
        }

    private:
        value_type_t _values;
        const iterator _end;
        const iterator _begin;
    };

    template<typename T, typename U>
    std::remove_reference_t<T> &get(U &it)
    {
        return std::get<std::remove_reference_t<T> &>(it);
    }


    template<typename T, typename U>
    const std::remove_const_t<std::remove_reference_t<T>> &get(U const &it)
    {
        return std::get<std::remove_const_t<std::remove_reference_t<T>> &>(it);
    }
}
}