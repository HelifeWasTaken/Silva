/*
Copyright (c) 2014, Zac Bergquist
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
// This file is based on the implementation of Zac Bergquist
// https://github.com/zmb3/hexdump

/**
 * SilvaHexdump
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
 * Made by: Mattis DALLEAU
 */

#pragma once

#include <cctype>
#include <iomanip>
#include <ostream>
#include "SilvaStdInt"

namespace hl
{
namespace silva
{

/**
 * @brief HexdumpConfig
 * @details A configuration for the hexdump
 */
template <u8 RowSize, bool8 ShowAscii>
struct HexdumpConfig
{
    /**
     * @brief Construct a new HexdumpConfig object
     * @param  data: The data to dump
     * @param  length: The length of the data
     */
    HexdumpConfig(const void *data, const u64 &length) :
        m_data(static_cast<const byte *>(data)), m_length(length) { }

    const byte *m_data;
    const u64 m_length;

    /**
     * @brief Print the hexdump
     * @param  out: The output stream
     * @retval The output stream
     */
    void print(std::ostream &out) const
    {
        out.fill('0');
        for (int i = 0; i < dump.m_length; i += RowSize)
        {
            out << "0x" << std::setw(6) << std::hex << i << ": ";
            for (int j = 0; j < RowSize; ++j)
            {
                if (i + j < dump.m_length)
                {
                    out << std::hex << std::setw(2) << static_cast<i16>(dump.m_data[i + j]) << " ";
                }
                else
                {
                    out << "   ";
                }
            }

            if constexpr (ShowAscii)
            {
                out << " ";
                for (int j = 0; j < RowSize; ++j)
                {
                    if (i + j < dump.m_length)
                    {
                        out << (std::isprint(dump.m_data[i + j]) ? static_cast<char>(dump.m_data[i + j]) : '.');
                    }
                }
            }
            out << std::endl;
        }
        return out;
    }

    /**
     * @brief Operator << overload
     * @param  out: The output stream
     * @param  dump: The dump to print
     * @retval The output stream
     */
    friend std::ostream& operator<<(std::ostream& out, const HexdumpConfig<RowSize, ShowAscii>& dump)
    {
        dump.print(out);
        return out;
    }
};

using Hexdump = HexdumpConfig<16, true>;

}
}