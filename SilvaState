/**
 * SilvaState.hpp
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * Made by: Mattis DALLEAU
 */
#pragma once

#include <memory>
#include <stack>

namespace hl
{
namespace silva
{

// Forward declaration
class StateManager;

/**
 * @brief State class
 * 
 * This class is the base class for all states
 * 
 * @param manager The state manager
 */
class AState 
{
private:
    StateManager *m_manager;

public:
    AState() = default;
    virtual ~AState() = default;

    // In case stuff needs to be done after the creation of the state
    // But only when the state is ready to be use
    virtual void init() = 0;

    virtual void update() = 0;

#ifdef SILVA_STATE_EVENT
    virtual void event() = 0;
#endif

#ifdef SILVA_STATE_RENDER
    virtual void render() = 0;
#endif

    StateManager &state_manager() const;

    void set_state_manager(StateManager *manager)
    {
        m_manager = manager;
    }
};

class State : public AState
{
private:
    using AState::set_state_manager;

public:
    State() = default;
    virtual ~State() = default;

    virtual void init() override
    {
    }

    virtual void update() override
    {
    }

#ifdef SILVA_STATE_EVENT
    virtual void event() override
    {
    }
#endif

#ifdef SILVA_STATE_RENDER
    virtual void render() override
    {
    }
#endif
};

/**
 * @brief StateManager class
 * 
 * This class is the manager of all states
 */
class StateManager
{
private:
    std::stack<std::unique_ptr<AState>> m_states;
    std::unique_ptr<AState> m_pending_state;
    std::size_t m_pop_count = 0;

    void _pop_states_internal()
    {
        for (std::size_t i = 0; i < m_pop_count; i++) {
            m_states.pop();
        }
    }

    // Function pointer to the update coroutine
    template<void(AState::*func)()>
    bool _basic_update_coroutine()
    {
        _pop_states_internal();
        if constexpr(func == &AState::update) {
            if (m_pending_state) {
                m_pending_state->init();
                m_states.push(std::move(m_pending_state));
            }
        }

        if (m_states.empty()) {
            return false;
        }
        (m_states.top().get()->*func)();
        return true;
    }

public:
    /**
     * @brief Construct a new StateManager object
     */
    StateManager() = default;

    /**
     * @brief Destroy the StateManager object
     */
    ~StateManager() = default;

    /**
     * @brief Emplace a new state
     * 
     * @tparam T The type of the state
     * @tparam Args The arguments of the state
     * @param args The arguments of the state
     */
    template<typename T, typename... Args>
    void push(Args&&... args)
    {
        auto state = std::make_unique<T>(std::forward<Args>(args)...);
        AState &state_ref = *state;
        state_ref.set_state_manager(this);
        m_pending_state = std::move(state);
    }

    /**
     * @brief Emplace a new state and remove all the other states
     * 
     * @tparam T The type of the state
     * @tparam Args The arguments of the state
     * @param args The arguments of the state
     */
    template<typename T, typename... Args>
    void replace(Args&&... args)
    {
        stop(true);
        push<T>(std::forward<Args>(args)...);
    }

    /**
     * @brief Pop a state
     */
    void pop()
    {
        m_pop_count = std::min(m_pop_count + 1, m_states.size());
    }

    /**
     * @brief Stops the state manager (Actually stops after the next update)
     * @param remove_pending If true, the pending state will be removed (default: false
     * @note This function is not immediate, it will stop after the next update()
     */
    void stop(bool remove_pending = false)
    {
        if (remove_pending) {
            m_pending_state.reset();
        }
        m_pop_count = m_states.size();
    }

    /**
     * @brief Update the current state
     * @return true If the state has been updated
     */
    bool update()
    {
        return _basic_update_coroutine<&AState::update>();
    }

#ifdef SILVA_STATE_EVENT
    /**
     * @brief Event the current state
     * @return true If the state has been evented
     */
    bool event()
    {
        return _basic_update_coroutine<&AState::event>();
    }
#endif

#ifdef SILVA_STATE_RENDER
    /**
     * @brief Render the current state
     * @return true If the state has been rendered
     */
    void render()
    {
        return _basic_update_coroutine<&AState::render>()
    }
#endif

};

}
}
